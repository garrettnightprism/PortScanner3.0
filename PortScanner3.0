import socket
import termcolor
import threading
import time

# Extensive list of common ports and their associated services
PORT_DESCRIPTIONS = {
    20: "FTP Data Transfer",
    21: "FTP Command Control",
    22: "SSH",
    23: "Telnet",
    25: "SMTP",
    53: "DNS",
    80: "HTTP",
    110: "POP3",
    143: "IMAP",
    443: "HTTPS",
    3389: "RDP",
    3306: "MySQL",
    8080: "HTTP Proxy",
    8443: "HTTPS Alt",
    27017: "MongoDB",
}

# Function to scan a specific port on a target
def scan_port(ipaddress, port, log_file):
    try:
        # Set up socket and connection timeout (3 seconds for more network stability)
        sock = socket.socket()
        sock.settimeout(3)
        sock.connect((ipaddress, port))
        
        # Retrieve service description if available
        service = PORT_DESCRIPTIONS.get(port, "Unknown Service")
        
        # Print open port with service description
        result_message = f"[+] Port {port} ({service}) is open on {ipaddress}"
        print(termcolor.colored(result_message, 'green'))
        
        # Log the result to the file
        with open(log_file, 'a') as f:
            f.write(result_message + "\n")
        
        sock.close()
    except:
        # Ignore closed ports silently
        pass

# Function to scan a range of ports on a target
def scan(target, ports, log_file):
    print('\n' + ' Starting Scan For ' + str(target))
    
    threads = []
    for port in range(1, ports + 1):
        thread = threading.Thread(target=scan_port, args=(target, port, log_file))
        thread.start()
        threads.append(thread)
    
    # Ensure all threads finish before the main script ends
    for thread in threads:
        thread.join()

# Main execution
if __name__ == "__main__":
    # Get target IPs and port range from the user
    targets = input("[*] Enter Targets To Scan (split them by ,): ")
    ports = int(input("[*] Enter How Many Ports You Want To Scan: "))
    
    # Create a log file with a timestamp
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    log_file = f"port_scan_results_{timestamp}.txt"
    
    # Log the start of the scan
    with open(log_file, 'a') as f:
        f.write(f"Scan started at {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    # Check if multiple targets are specified
    if ',' in targets:
        print(termcolor.colored("[*] Scanning Multiple Targets", 'green'))
        for ip_addr in targets.split(','):
            scan(ip_addr.strip(' '), ports, log_file)
    else:
        scan(targets, ports, log_file)
    
    # Log the end of the scan
    with open(log_file, 'a') as f:
        f.write(f"Scan completed at {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
